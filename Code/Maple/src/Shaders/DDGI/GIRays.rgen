#version 460

#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require


layout(set = 1, binding = 0, rgba16f) uniform image2D iRadiance;
layout(set = 1, binding = 1, rgba16f) uniform image2D iDirectionDistance;

layout(set = 4, binding = 2, scalar) uniform DDGIUBO
{
    DDGIUniforms ddgi;
};

layout(pushConstant) uniform PushConstants
{
    mat4  randomOrientation;
    uint  numFrames;
    uint  infinite_bounces;
    float gi_intensity;
}
pushConsts;


layout(location = 0) rayPayloadEXT GIPayload outPayload;


vec3 sphericalFibonacci(float i, float n)
{
    const float PHI = sqrt(5) * 0.5 + 0.5;
#define madfrac(A, B) ((A) * (B)-floor((A) * (B)))
    float phi       = 2.0 * M_PI * madfrac(i, PHI - 1);
    float cos_theta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sin_theta = sqrt(clamp(1.0 - cos_theta * cos_theta, 0.0f, 1.0f));

    return vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);
#undef madfrac
}

void main()
{
    const ivec2 texCoords   = ivec2(gl_LaunchIDEXT.xy);
    const int probeId       = texCoords.y;
    const int rayId         = texCoords.x;

    uint  rayFlags  = gl_RayFlagsOpaqueEXT;
    uint  cullMask  = 0xff;
    float tmin      = 0.001;
    float tmax      = 10000.0;
    vec3  rayOrigin = probeLocation(ddgi, probeId);
    vec3  direction  = normalize(mat3(pushConsts.randomOrientation) * sphericalFibonacci(ray_id, ddgi.raysPerProbe));

    outPayload.random = randomInit(texCoords, pushConsts.numFrames);
    outPayload.L = vec3(0.0f);
    outPayload.T = vec3(1.0f);
    outPayload.hitDistance = tmax;

    traceRayEXT(uTopLevelAS, rayFlags, cullMask, 0, 0, 0, rayOrigin, tmin, direction, tmax, 0);

    //get radiance / hitDistance.
    imageStore(iRadiance, texCoords, vec4(p_Payload.L, 0.0f));
    imageStore(iDirectionDistance, texCoords, vec4(direction, outPayload.hitDistance));
}

// ------------------------------------------------------------------------