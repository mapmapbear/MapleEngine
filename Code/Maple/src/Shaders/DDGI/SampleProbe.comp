#version 460

#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : require

#include "DDGICommon.glsl"

#define NUM_THREADS_X 32
#define NUM_THREADS_Y 32

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;


layout(set = 0, binding = 0, rgba16f) uniform image2D outColor;
layout(set = 0, binding = 1) uniform sampler2D uIrradiance;
layout(set = 0, binding = 2) uniform sampler2D uDepth;
layout(set = 0, binding = 3, scalar) uniform DDGIUBO
{
    DDGIUniform ddgi;
};

layout(set = 0, binding = 4) uniform sampler2D uPositionSampler;
layout(set = 0, binding = 5) uniform sampler2D uNormalSampler;
layout(set = 0, binding = 6) uniform UniformBufferObject
{
    vec4  cameraPosition;
}ubo;

const float FLT_EPS = 0.00000001;

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    const ivec2 size          = textureSize(uPositionSampler,0);
    const vec2  texelSize    = vec2(1.0f) / vec2(size);
    const ivec2 currentCoord = ivec2(gl_GlobalInvocationID.xy);
    const vec2  pixelCenter  = vec2(currentCoord) + vec2(0.5);
    const vec2  texCoord     = pixelCenter / vec2(size);

    const vec3 P  = texelFetch(uPositionSampler, currentCoord, 0).xyz;
    const vec3 N  = texelFetch(uNormalSampler, currentCoord, 0).xyz;
    const vec3 Wo = normalize(ubo.cameraPosition.xyz - P);

    vec3 irradiance = sampleIrradiance(ddgi, P, N, Wo, uIrradiance, uDepth);

    imageStore(outColor, currentCoord, vec4(irradiance, 1.0f));
}