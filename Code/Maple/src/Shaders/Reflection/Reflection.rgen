#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_scalar_block_layout : enable

#include "Common.glsl"
#include "../PathTrace/BRDF.glsl"
#include "../DDGI/DDGICommon.glsl"
#include "../Raytraced/BlueNoise.glsl"

layout(location = 0) rayPayloadEXT ReflectionPayload outPayload; //out

layout(set = 0, binding = 0, rgba16f) uniform image2D outColor;

layout(set = 0, binding = 3) uniform accelerationStructureEXT uTopLevelAS;

layout(set = 1, binding = 1) uniform sampler2D uPositionSampler;
layout(set = 1, binding = 2) uniform sampler2D uNormalSampler;
layout(set = 1, binding = 3) uniform sampler2D uDepthSampler;
layout(set = 1, binding = 4) uniform sampler2D uPBRSampler;
layout(set = 1, binding = 5) uniform sampler2D uSobolSequence;
layout(set = 1, binding = 6) uniform sampler2D uScramblingRankingTile;

layout (set = 5, binding = 0) uniform sampler2D uIrradiance;
layout (set = 5, binding = 1) uniform sampler2D uDepth;
layout (set = 5, binding = 2, scalar) uniform DDGIUBO
{
    DDGIUniform ddgi;
};
layout(set = 6, binding = 0) uniform UniformBufferObject
{
    vec4  cameraPosition;
}ubo;

layout(push_constant) uniform PushConstants
{
    float bias;
    float trim;
    uint  numLights;
    uint  numFrames;
    int   sampleGI;
    int   approximateWithDDGI;
    float intensity;
    float roughDDGIIntensity;
}pushConsts;

vec2 nextSample(ivec2 coord)
{
    return vec2(sampleBlueNoise(coord, int(pushConsts.numFrames), 0, uSobolSequence, uScramblingRankingTile),
                sampleBlueNoise(coord, int(pushConsts.numFrames), 1, uSobolSequence, uScramblingRankingTile));
}


void main()
{
    const ivec2 size = textureSize(uPositionSampler, 0);
    const ivec2 currentCoord = ivec2(gl_LaunchIDEXT.xy);
    const vec2  pixelCenter  = vec2(currentCoord) + vec2(0.5);
    const vec2  texCoord     = pixelCenter / vec2(size);

    float depth = texelFetch(uDepthSampler, currentCoord, 0).r;

    if (depth == 1.0f)
    {
        imageStore(outColor, currentCoord, vec4(0.0f, 0.0f, 0.0f, -1.0f));
        return;
    }

    float roughness = texelFetch(uPBRSampler, currentCoord, 0).g;
    vec3  P         = texelFetch(uPositionSampler, currentCoord, 0).xyz;
    vec3  N         = texelFetch(uNormalSampler, currentCoord,0).xyz;
    vec3  Wo        = normalize(ubo.cameraPosition.xyz - P.xyz);

    uint  rayFlags  = gl_RayFlagsOpaqueEXT;
    uint  cullMask  = 0xff;
    float tmin       = 0.001;
    float tmax       = 10000.0;
    vec3  rayOrigin = P + N * pushConsts.bias;

    outPayload.rayLength = -1.0f;

    if (roughness < MIRROR_REFLECTIONS_ROUGHNESS_THRESHOLD)
    {
        vec3 R = reflect(-Wo, N.xyz);
        traceRayEXT(uTopLevelAS, rayFlags, cullMask, 0, 0, 0, rayOrigin, tmin, R, tmax, 0);
    }
    else if (roughness > DDGI_REFLECTIONS_ROUGHNESS_THRESHOLD && pushConsts.approximateWithDDGI == 1)
    {
        vec3 R          = reflect(-Wo, N.xyz);
        outPayload.color = pushConsts.roughDDGIIntensity * sampleIrradiance(ddgi, P, R, Wo, uIrradiance, uDepth);
    }
    else
    {
        vec2 Xi = nextSample(currentCoord) * pushConsts.trim;

        vec4 WhPDF = importanceSampleGGX(Xi, N, roughness);

        float pdf = WhPDF.w;
        vec3  Wi  = reflect(-Wo, WhPDF.xyz);
        traceRayEXT(uTopLevelAS, rayFlags, cullMask, 0, 0, 0, rayOrigin, tmin, Wi, tmax, 0);
    }

    vec3 clampedColor = min(outPayload.color, vec3(0.7f));
    imageStore(outColor, currentCoord, vec4(clampedColor, outPayload.rayLength));
}